<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Captain&#39;s blog</title>
  
  <subtitle>No sense no words</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onlycaptain.github.io/"/>
  <updated>2018-12-03T08:43:28.682Z</updated>
  <id>https://onlycaptain.github.io/</id>
  
  <author>
    <name>zhanjzh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下终端分屏</title>
    <link href="https://onlycaptain.github.io/2018/12/03/Linux%E4%B8%8B%E7%BB%88%E7%AB%AF%E5%88%86%E5%B1%8F/"/>
    <id>https://onlycaptain.github.io/2018/12/03/Linux下终端分屏/</id>
    <published>2018-12-03T08:29:07.000Z</published>
    <updated>2018-12-03T08:43:28.682Z</updated>
    
    <content type="html"><![CDATA[<p>@author zhanjzh</p><a id="more"></a><h2><span id="linux下终端分屏效果">Linux下终端分屏效果</span></h2><p>效果如下：</p><p><img src="distru-3.png"></p><h2><span id="工具">工具</span></h2><p>tmux</p><p>安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tmux</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><h2><span id="常用命令">常用命令：</span></h2><table><thead><tr><th>命令</th><th>快捷键</th></tr></thead><tbody><tr><td>复制</td><td>c + b  , 用光标选取要复制的内容</td></tr><tr><td>粘贴</td><td>c + b+ ]</td></tr><tr><td>竖直分屏</td><td>c + b  “</td></tr><tr><td>水平分屏</td><td>c + b %</td></tr></tbody></table><p>配置让鼠标能够调节窗口大小以及选择终端：</p><p>新建配置文件 <code>~/.tmux.conf</code></p><p>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Enable mouse mode (tmux 2.1 and above)</span><br><span class="line">set -g mouse on</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Enable oh my zsh in tmux</span><br><span class="line">set -g default-command /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Mouse based copy</span><br><span class="line">bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"</span><br><span class="line">bind-key -T copy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy" </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建分屏保留原来路径</span><br><span class="line">bind '"' split-window -c "#&#123;pane_current_path&#125;"</span><br><span class="line">bind % split-window -h -c "#&#123;pane_current_path&#125;"</span><br><span class="line">bind c new-window -c "#&#123;pane_current_path&#125;"</span><br><span class="line">~</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vim自动补全插件YouCompleteMe安装</title>
    <link href="https://onlycaptain.github.io/2018/12/03/Vim%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6YoucompleteMe%E5%AE%89%E8%A3%85/"/>
    <id>https://onlycaptain.github.io/2018/12/03/Vim自动补全插件YoucompleteMe安装/</id>
    <published>2018-12-03T06:56:39.000Z</published>
    <updated>2018-12-03T08:00:44.049Z</updated>
    
    <content type="html"><![CDATA[<p>@author zhanjzh</p><a id="more"></a><h2><span id="youcompleteme">YouCompleteMe</span></h2><p>简称YCM，使用vim编程的人应该都有所耳闻，YCM作为Vim的补全插件真的是神器。</p><p>一般情况下，我使用vscode来编程，vscode本身就已经有很不错的补全插件，但是在进行cuda编程时，很无奈的发现vscode只有一个很残缺的<code>vscode-cudacpp</code> 插件。为什么说残缺呢，是因为这个插件能提供的功能只有<code>.cu</code> 文件中对cuda 语法高亮，支持的语法补全都是缩写，只支持很少数的一部分函数，并且没有函数提示。</p><p>相比之下，vim 下的YouCompleteMe就表现得十分优秀。</p><h2><span id="前提条件">前提条件</span></h2><p>安装YCM是有版本前提的，</p><ol><li>vim版本要8.0 或者以上（最新）</li><li>自己安装 git 工具包</li><li>vim支持 python2或者 python3</li></ol><h2><span id="安装过程">安装过程</span></h2><p>在网上找到了不止一个版本的安装博客，翻来翻去都试了一下，大致的方法有下面几种：</p><ul><li>使用系统自带的clang</li><li>使用YCM自己下载的clang</li><li>使用自己编译的clang</li></ul><p>无论哪种安装之后都不太行，YCM好用是好用，安装是真的坑。</p><p>官网README的安装教程： <a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">readme</a></p><p>我的系统为 Ubuntu</p><h3><span id="1-配置vim的插件管理器-vundle">1. 配置vim的插件管理器 vundle</span></h3><p>在<code>~/.vim</code> 目录下，先自行下载<code>vundle</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</span><br></pre></td></tr></table></figure><p>修改<code>vim</code>的配置文件<code>~/.vimrc</code> （第一次使用vim的人请自行创建）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">"filetype off</span><br><span class="line">set rtp+=~/.vim/bundle/vundle</span><br><span class="line">call vundle#begin()</span><br><span class="line">Bundle 'gmarik/vundle'</span><br><span class="line">Plugin 'Valloric/YouCompleteMe'</span><br><span class="line">"Brief help of vundle</span><br><span class="line">    ":BundleList</span><br><span class="line">    ":BundleInstall</span><br><span class="line">    ":BundleSearch</span><br><span class="line">    ":BundleClean</span><br><span class="line">    ":help vundle</span><br><span class="line">"End brief help</span><br><span class="line"></span><br><span class="line">call vundle#end()</span><br></pre></td></tr></table></figure><h3><span id="2-使用vundle安装ycm">2. 使用vundle安装YCM</span></h3><p>第一步修改配置文件后退出重新进入<code>vim</code> ，在<code>vim</code> 下执行<code>BundleInstall</code> .</p><p>具体步骤：按下<code>Esc</code> 键，<code>shift</code> + <code>;</code> 按出 <code>:</code> ，输入<code>BundleInstall</code>。</p><p>等待YCM安装完毕之后，在目录 <code>~/.vim/bundle/</code> 下应该会看到有 <code>YouCompleteMe</code> 这个目录。</p><h3><span id="3-配置ycm的自动补全">3. 配置YCM的自动补全</span></h3><p>主要配置的是 C和C++ 的自动补全。</p><p>按照官网的安装步骤，下面应该执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/bundle/YouCompleteMe</span><br><span class="line">python3 install.py --all</span><br></pre></td></tr></table></figure><p>然而很遗憾，如果直接按照这个步骤来执行在下载 clang 时会报出类似这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file: [/home/irvinglwj/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/../clang_archives/clang+llvm-3.9.0-x86_64-opensuse13.2.tar.xz]</span><br><span class="line">  expected hash: [9153b473dc37d2e21a260231e90e43b97aba1dff5d27f14c947815a90fbdc8d7]</span><br><span class="line">    actual hash: [e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]</span><br><span class="line">         status: [7;&quot;Couldn&apos;t connect to server&quot;]</span><br></pre></td></tr></table></figure><p>意思是下载的hash不匹配。网上查了信息后有网友说原因是这个：clang官网地址迁移，但是安装包还是使用的旧的地址，因此会解析失败。</p><p>既然下载失败那就只能自行编译或者加上 <code>--system-libclang</code> 参数</p><p>但是经常会报出<code>YCM server shut down</code>  之类的奇妙错误。下面我说一下我的做法：</p><ol><li>自行下载对应的 clang + llvm 安装包，没记错的话我是在这里下载的： <a href="http://releases.llvm.org/download.html#7.0.0" target="_blank" rel="noopener">clang+llvm7.0</a> </li><li>将下载完的压缩包放入<code>~/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_archives</code> 目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/Downloads/libclang-7.0.0-x86_64-unknown-linux-gnu.tar.bz2 ~/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_archives</span><br></pre></td></tr></table></figure><ol start="3"><li>执行官网的安装命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/bundle/YouCompleteMe</span><br><span class="line">python3 install.py --clang-completer</span><br></pre></td></tr></table></figure><p>如果执行 <code>--all</code> 的话在配置<code>c#</code> 补全时会出现一些错误，但是我目前不需要<code>c#</code> 的补全，因此没去管，另外YCM默认是有python补全的。</p><p>到目前位置应该安装完，重新进入vim会提示没有配置文件<code>.ycm_extra_conf.py</code> ，下面会说一下<code>.ycm_extra_conf.py</code> 的配置。</p><h3><span id="4-后续配置">4. 后续配置</span></h3><p>复制<code>.ycm_extra_conf.py</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py ~/.vim</span><br></pre></td></tr></table></figure><p>在<code>~/.vimrc</code> 添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let g:ycm_global_ycm_extra_conf=&apos;~/.vim/.ycm_extra_conf.py&apos;</span><br></pre></td></tr></table></figure><p>这之后需要配置C++ 和 C 或者 cuda 的头文件所在地</p><p>我的<code>.ycm_extra_conf.py</code> 文件如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright (C) 2014 Google Inc.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file is part of ycmd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ycmd is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment"># it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment"># the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment"># (at your option) any later version.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ycmd is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment"># GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment"># along with ycmd.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ycm_core</span><br><span class="line"></span><br><span class="line"><span class="comment"># These are the compilation flags that will be used in case there's no</span></span><br><span class="line"><span class="comment"># compilation database set (by default, one is not set).</span></span><br><span class="line"><span class="comment"># CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.</span></span><br><span class="line">flags = [</span><br><span class="line"><span class="string">'-Wall'</span>,</span><br><span class="line"><span class="string">'-Wextra'</span>,</span><br><span class="line"><span class="string">'-Werror'</span>,</span><br><span class="line"><span class="string">'-fexceptions'</span>,</span><br><span class="line"><span class="string">'-DNDEBUG'</span>,</span><br><span class="line"><span class="comment"># THIS IS IMPORTANT! Without a "-std=&lt;something&gt;" flag, clang won't know which</span></span><br><span class="line"><span class="comment"># language to use when compiling headers. So it will guess. Badly. So C++</span></span><br><span class="line"><span class="comment"># headers will be compiled as C headers. You don't want that so ALWAYS specify</span></span><br><span class="line"><span class="comment"># a "-std=&lt;something&gt;".</span></span><br><span class="line"><span class="comment"># For a C project, you would set this to something like 'c99' instead of</span></span><br><span class="line"><span class="comment"># 'c++11'.</span></span><br><span class="line"><span class="string">'-std=c++11'</span>,</span><br><span class="line"><span class="comment"># ...and the same thing goes for the magic -x option which specifies the</span></span><br><span class="line"><span class="comment"># language that the files to be compiled are written in. This is mostly</span></span><br><span class="line"><span class="comment"># relevant for c++ headers.</span></span><br><span class="line"><span class="comment"># For a C project, you would set this to 'c' instead of 'c++'.</span></span><br><span class="line"><span class="string">'-x'</span>,</span><br><span class="line"><span class="string">'c++'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/local/include'</span>,</span><br><span class="line"><span class="comment">#'-isystem',</span></span><br><span class="line"><span class="comment">#'/usr/include/c++/7.3.0',</span></span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include/c++/4.8'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/local/cuda-9.0/include'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/local/cuda'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/lib/gcc/x86_64-linux-gnu/4.8'</span>,</span><br><span class="line"><span class="comment">#'-isystem',</span></span><br><span class="line"><span class="comment">#'/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/backward/',</span></span><br><span class="line"><span class="comment">#'-isystem',</span></span><br><span class="line"><span class="comment">#'/usr/include/clang/6.0.0/include',</span></span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include/x86_64-linux-gnu'</span>,</span><br><span class="line"><span class="comment">#'-isystem',</span></span><br><span class="line"><span class="comment">#'/usr/lib/llvm-6.0/lib/clang/6.0.0/include',</span></span><br><span class="line"><span class="comment">#'-isystem',</span></span><br><span class="line"><span class="comment">#'/usr/include/clang/6.0.0/include',</span></span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include/c++/4.8'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set this to the absolute path to the folder (NOT the file!) containing the</span></span><br><span class="line"><span class="comment"># compile_commands.json file to use that instead of 'flags'. See here for</span></span><br><span class="line"><span class="comment"># more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Most projects will NOT need to set this to anything; you can just change the</span></span><br><span class="line"><span class="comment"># 'flags' list of compilation flags.</span></span><br><span class="line">compilation_database_folder = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists( compilation_database_folder ):</span><br><span class="line">  database = ycm_core.CompilationDatabase( compilation_database_folder )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  database = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">SOURCE_EXTENSIONS = [ <span class="string">'.cpp'</span>, <span class="string">'.cxx'</span>, <span class="string">'.cc'</span>, <span class="string">'.c'</span>, <span class="string">'.m'</span>, <span class="string">'.mm'</span>, <span class="string">'.cu'</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DirectoryOfThisScript</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> os.path.dirname( os.path.abspath( __file__ ) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IsHeaderFile</span><span class="params">( filename )</span>:</span></span><br><span class="line">  extension = os.path.splitext( filename )[ <span class="number">1</span> ]</span><br><span class="line">  <span class="keyword">return</span> extension <span class="keyword">in</span> [ <span class="string">'.h'</span>, <span class="string">'.hxx'</span>, <span class="string">'.hpp'</span>, <span class="string">'.hh'</span> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetCompilationInfoForFile</span><span class="params">( filename )</span>:</span></span><br><span class="line">  <span class="comment"># The compilation_commands.json file generated by CMake does not have entries</span></span><br><span class="line">  <span class="comment"># for header files. So we do our best by asking the db for flags for a</span></span><br><span class="line">  <span class="comment"># corresponding source file, if any. If one exists, the flags for that file</span></span><br><span class="line">  <span class="comment"># should be good enough.</span></span><br><span class="line">  <span class="keyword">if</span> IsHeaderFile( filename ):</span><br><span class="line">    basename = os.path.splitext( filename )[ <span class="number">0</span> ]</span><br><span class="line">    <span class="keyword">for</span> extension <span class="keyword">in</span> SOURCE_EXTENSIONS:</span><br><span class="line">      replacement_file = basename + extension</span><br><span class="line">      <span class="keyword">if</span> os.path.exists( replacement_file ):</span><br><span class="line">        compilation_info = database.GetCompilationInfoForFile(</span><br><span class="line">          replacement_file )</span><br><span class="line">        <span class="keyword">if</span> compilation_info.compiler_flags_:</span><br><span class="line">          <span class="keyword">return</span> compilation_info</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">  <span class="keyword">return</span> database.GetCompilationInfoForFile( filename )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the entry point; this function is called by ycmd to produce flags for</span></span><br><span class="line"><span class="comment"># a file.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FlagsForFile</span><span class="params">( filename, **kwargs )</span>:</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> database:</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">'flags'</span>: flags,</span><br><span class="line">      <span class="string">'include_paths_relative_to_dir'</span>: DirectoryOfThisScript()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  compilation_info = GetCompilationInfoForFile( filename )</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> compilation_info:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Bear in mind that compilation_info.compiler_flags_ does NOT return a</span></span><br><span class="line">  <span class="comment"># python list, but a "list-like" StringVec object.</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">'flags'</span>: list( compilation_info.compiler_flags_ ),</span><br><span class="line">    <span class="string">'include_paths_relative_to_dir'</span>: compilation_info.compiler_working_dir_</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>重要的地方只有<code>flags</code> 那里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">flags = [</span><br><span class="line"><span class="string">'-Wall'</span>,</span><br><span class="line"><span class="string">'-Wextra'</span>,</span><br><span class="line"><span class="string">'-Werror'</span>,</span><br><span class="line"><span class="string">'-fexceptions'</span>,</span><br><span class="line"><span class="string">'-DNDEBUG'</span>,</span><br><span class="line"><span class="string">'-x'</span>,</span><br><span class="line"><span class="string">'c++'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/local/include'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include/c++/4.8'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/local/cuda-9.0/include'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/local/cuda'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/lib/gcc/x86_64-linux-gnu/4.8'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include/x86_64-linux-gnu'</span>,</span><br><span class="line"><span class="string">'-isystem'</span>,</span><br><span class="line"><span class="string">'/usr/include/c++/4.8'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>另外如果是跟我一样要配置cuda的补全的话，有些地方要修改一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOURCE_EXTENSIONS = [ <span class="string">'.cpp'</span>, <span class="string">'.cxx'</span>, <span class="string">'.cc'</span>, <span class="string">'.c'</span>, <span class="string">'.m'</span>, <span class="string">'.mm'</span>, <span class="string">'.cu'</span> ] <span class="comment"># 添加 .cu</span></span><br></pre></td></tr></table></figure><p>配置输入两个字符就能提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let g:ycm_semantic_triggers=&#123;'c,cpp,python,cuda': ['re!\w&#123;2&#125;'] &#125;</span><br></pre></td></tr></table></figure><p>取消函数提示时在上方跳出的框框：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set completeopt=menu,menuone</span><br><span class="line">let g:ycm_add_pre_view_to_completeopt=0</span><br></pre></td></tr></table></figure><p>更多功能有待发掘。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下google不能正确代理的解决方法</title>
    <link href="https://onlycaptain.github.io/2018/10/01/Ubuntu%E4%B8%8Bgoogle%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E4%BB%A3%E7%90%86%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://onlycaptain.github.io/2018/10/01/Ubuntu下google不能正确代理的解决方法/</id>
    <published>2018-10-01T14:21:20.000Z</published>
    <updated>2018-10-01T14:38:17.292Z</updated>
    
    <content type="html"><![CDATA[<p>@author:zhanjzh</p><a id="more"></a><h2><span id="问题陈述">问题陈述</span></h2><p>在某些环境下，我们配置的 shadowsocks 代理可能在chrome之外的浏览器能正常工作，但在chrome下反而不能正确代理流量。</p><h2><span id="寻找解决方法">寻找解决方法</span></h2><p>通过打开 chrome://chrome-urls 中的 chrome://linux-proxy-config , 你可以看到网址给你的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在受支持的桌面环境中运行Google Chrome时，将使用系统代理设置。但您的系统不受支持，或启动系统配置时出现问题。</span><br><span class="line"></span><br><span class="line">但您仍可通过命令行进行配置。如需详细了解各项实验功能和环境变量，请参见 man google-chrome-stable。</span><br></pre></td></tr></table></figure></p><h2><span id="解决">解决</span></h2><p>那么问题就很简单了，加上配置参数就行。<br>通过</p><blockquote><p>man google-chrome-stable<br>查看 proxy 的相关选项。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">--proxy-server=host:port</span><br><span class="line">       Specify the HTTP/SOCKS4/SOCKS5 proxy server to use for requests.</span><br><span class="line"></span><br><span class="line">       This overrides any environment variables or settings picked  via</span><br><span class="line">       the  options  dialog.   An  individual proxy server is specified</span><br><span class="line">       using the format:</span><br><span class="line"></span><br><span class="line">         [&lt;proxy-scheme&gt;://]&lt;proxy-host&gt;[:&lt;proxy-port&gt;]</span><br><span class="line"></span><br><span class="line">       Where &lt;proxy-scheme&gt; is the protocol of the proxy server, and is</span><br><span class="line">       one of:</span><br><span class="line"></span><br><span class="line">         &quot;http&quot;, &quot;socks&quot;, &quot;socks4&quot;, &quot;socks5&quot;.</span><br><span class="line"></span><br><span class="line">       If  the  &lt;proxy-scheme&gt;  is omitted, it defaults to &quot;http&quot;. Also</span><br><span class="line">       note that &quot;socks&quot; is equivalent to &quot;socks5&quot;.</span><br><span class="line"></span><br><span class="line">       Examples:</span><br><span class="line"></span><br><span class="line">         --proxy-server=&quot;foopy:99&quot;</span><br><span class="line">             Use the HTTP proxy &quot;foopy:99&quot; to load all URLs.</span><br><span class="line"></span><br><span class="line">         --proxy-server=&quot;socks://foobar:1080&quot;</span><br><span class="line">             Use the SOCKS v5 proxy &quot;foobar:1080&quot; to load all URLs.</span><br><span class="line"></span><br><span class="line">         --proxy-server=&quot;socks4://foobar:1080&quot;</span><br><span class="line">             Use the SOCKS v4 proxy &quot;foobar:1080&quot; to load all URLs.</span><br><span class="line"></span><br><span class="line">         --proxy-server=&quot;socks5://foobar:66&quot;</span><br><span class="line">             Use the SOCKS v5 proxy &quot;foobar:66&quot; to load all URLs.</span><br><span class="line"></span><br><span class="line">       It is also possible to specify a separate proxy server for  dif‐</span><br><span class="line">       ferent URL types, by prefixing the proxy server specifier with a</span><br><span class="line">       URL specifier:</span><br><span class="line"></span><br><span class="line">       Example:</span><br><span class="line"></span><br><span class="line">         --proxy-server=&quot;https=proxy1:80;http=socks4://baz:1080&quot;</span><br><span class="line">             Load https://* URLs using the HTTP proxy &quot;proxy1:80&quot;.  And</span><br><span class="line">       load http://*</span><br><span class="line">             URLs using the SOCKS v4 proxy &quot;baz:1080&quot;.</span><br><span class="line"></span><br><span class="line">--no-proxy-server</span><br><span class="line">       Disables  the proxy server.  Overrides any environment variables</span><br><span class="line">       or settings picked via the options dialog.</span><br><span class="line"></span><br><span class="line">--proxy-auto-detect</span><br><span class="line">       Autodetect proxy configuration.  Overrides any environment vari‐</span><br><span class="line">       ables or settings picked via the options dialog.</span><br></pre></td></tr></table></figure><p>我的shadowsockks是基于socks协议，端口为127.0.0.1:1080 的，于是我的操作如下：<br>打开 google-chrome-stable 的启动快捷方式：</p><blockquote><p>sudo vim /usr/share/applications/google-chrome-stable.desktop</p></blockquote><p>查找每一个 <code>Exec</code>, 在该行后面添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--proxy-server=&quot;socks://127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure></p><p>如果你使用的协议跟我不同的话，做一些相应的修改即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author:zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="config" scheme="https://onlycaptain.github.io/categories/config/"/>
    
    
      <category term="config Applications" scheme="https://onlycaptain.github.io/tags/config-Applications/"/>
    
  </entry>
  
  <entry>
    <title>Windows下Linux子系统迁移到非系统盘</title>
    <link href="https://onlycaptain.github.io/2018/09/30/Windows%E4%B8%8BLinux%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E9%9D%9E%E7%B3%BB%E7%BB%9F%E7%9B%98/"/>
    <id>https://onlycaptain.github.io/2018/09/30/Windows下Linux子系统迁移到非系统盘/</id>
    <published>2018-09-29T17:11:19.000Z</published>
    <updated>2018-09-29T17:25:17.539Z</updated>
    
    <content type="html"><![CDATA[<p>@author:zhanjzh</p><a id="more"></a><p>Windows下的Linux子系统对于工作在Linux系统下的人而言是十分方便的，但是用久了就会发现子系统对C盘的占用空间越来越大，原因在于Linux默认安装在用户目录下的 <code>AppData\Local\Packages</code> 下。</p><p>本文介绍在Windows下对Linux子系统迁移的方法。</p><h3><span id="工具">工具</span></h3><p><code>mklink</code> : 本质上是一个创建链接的工具，这里使用<code>mklink</code> 欺骗系统，使系统误以为还是安装在了C盘</p><p>首先，我们需要找到子系统安装的文件系统在哪个位置，根据以往的经验，系统位置在：</p><blockquote><p>C:\Users\xxxx\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows</p></blockquote><p>注意 <code>AppData</code> 文件夹是隐藏文件夹，你需要打开查看隐藏文件的选项。</p><p>但实际上这个根据你自己安装的子系统需要自己另外确定，我上次安装的文件夹是上面哪个，第二次安装又变成了下面这个：</p><blockquote><p>C:\Users\xxxx\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc</p></blockquote><h3><span id="定位linux子系统的文件系统位置">定位Linux子系统的文件系统位置</span></h3><p>简单直接的方法：</p><ul><li>首先安装一遍Linux子系统，在</li></ul><blockquote><p> C:\Users\xxxx\AppData\Local\Packages\</p></blockquote><p>下查看带有类似 <code>CanonicalGroupLimited.UbuntuonWindows</code> 字眼的新文件夹，记下它的名字。</p><h3><span id="开始安装">开始安装</span></h3><ul><li>卸载Linux子系统。</li></ul><p>卸载的原因在于Linux子系统下的文件系统的权限更改十分复杂，这里面的一些文件不属于Windows下的管理员用户所有，也不属于你的用户，它就是Linux下用户所有的，使用一般的修改权限文件方法很容易出问题。因此还是推荐先备份后再卸载。</p><ul><li>创造软链接</li></ul><p>使用管理员打开<code>cmd</code>， 输入下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /j C:\Users\XXXX\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc  H:\Linux-share\WSL\</span><br></pre></td></tr></table></figure><p>后面那个 <code>H:\Linux-share\WSL\</code> 是非系统盘的位置。</p><ul><li>创建成功后再打开应用商店，安装Linux子系统。</li></ul><h3><span id="问题">问题</span></h3><ul><li>安装成功后出现 <code>0x800703fa</code></li></ul><blockquote><p>WslRegisterDistribution failed with error: 0x800703fa</p></blockquote><p>网上查过方法：在运行窗口中执行“services.msc”指令，在本地服务中重启 LxssManager 服务即可。 </p><p>经确认，行之有效。</p><ul><li>如果出现了什么文件夹权限的问题（我没有出现过），可以用下面的命令：</li></ul><blockquote><p>icacls Linux-share\WSL\ /grant “你的用户名:(OI)(CI)(F)”</p></blockquote><p>我没有遇见过文件权限问题，但是我曾经执行过上面这条语句，如果遇见了，可以试一下。</p><h3><span id="总结">总结</span></h3><p>网上查找了许多方法，试过了不少。有个博主使用的是将<code>AppData</code>下的<code>Local</code>目录全部指向其他地方的方法，如果这个方法有效的话想必能省很多C盘空间，可惜的是，不行。文件在复制迁移的过程会遇见权限问题，即便是另外使用管理员用户也不行，除非使用 PE 盘，但是那样太过于麻烦。 这篇文章介绍的方法其实是一种折中的方式，迁移文件不涉及到那些存在权限问题的文件。</p><p>同样的道理，使用 <code>mklink</code> 工具可以将其他大文件迁移到非系统盘后再创造软链接，用于减小C盘负担是很不错的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author:zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://onlycaptain.github.io/categories/Windows/"/>
    
    
      <category term="config" scheme="https://onlycaptain.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下实用配置</title>
    <link href="https://onlycaptain.github.io/2018/09/07/Ubuntu%E4%B8%8B%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://onlycaptain.github.io/2018/09/07/Ubuntu下实用配置/</id>
    <published>2018-09-07T15:46:08.000Z</published>
    <updated>2018-09-23T07:30:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><blockquote><p>作为日常使用的系统，Ubuntu 下有很多可以提高用户体验的实用配置。<br>这篇博客将会列举在使用 Ubuntu 过程中遇到的一些有用的配置。<br>此文将不定时更新。</p></blockquote><h3><span id="省电模式安装">省电模式安装</span></h3><ul><li>工具： laptop-mode-tools</li><li>安装：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install laptop-mode-tools</span><br></pre></td></tr></table></figure><ul><li>检查是否安装成功：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep laptop-mode-tools</span><br></pre></td></tr></table></figure><ul><li>修改 /etc/laptop-mode/laptop-mode.conf 文件中的项：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ENABLE_LAPTOP_MODE_ON_BATTERY=1</span><br><span class="line">ENABLE_LAPTOP_MODE_ON_AC=1</span><br><span class="line">ENABLE_LAPTOP_MODE_WHEN_LID_CLOSED=1</span><br></pre></td></tr></table></figure><ul><li>启动 laptop：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo laptop_mode start</span><br></pre></td></tr></table></figure><blockquote><p>说明：安装成功后在休眠和合上盖子时系统都会自动挂起，直到系统被手动唤醒，<br>成功安装 laptop 后，为了更加省电，可以将核心显卡关闭（没有显卡的同学就不用了）</p></blockquote><ul><li><p>关闭核心显卡 ( 需要先安装Nvidia驱动，具体可参考另一篇<a href="https://onlycaptain.github.io/2018/08/18/Ubuntu下Nvidia驱动安装/">博客</a>)</p><ul><li><p>选择集显作为图形界面处理器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo prime-select intel</span><br></pre></td></tr></table></figure></li><li><p>重启电脑</p></li><li>恢复核心显卡 (只适用于Nvidia卡的情况)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo prime-select nvidia</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3><span id="双系统同步-windows-和-linux-时间">双系统同步 windows 和 Linux 时间</span></h3><blockquote><p>参考博客：<a href="https://blog.csdn.net/gatieme/article/details/51883981" target="_blank" rel="noopener">https://blog.csdn.net/gatieme/article/details/51883981</a></p></blockquote><p>系统时间不同步的问题解决方法有两个：</p><ul><li>一是让Ubuntu 使用 windows 的时间管理方式</li><li>二是让windows 使用 ubuntu 的时间管理方式</li></ul><p>第一种：<br>在终端下输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/rcS</span><br></pre></td></tr></table></figure></p><p>找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UTC=yes</span><br></pre></td></tr></table></figure></p><p>修改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UTC=no</span><br></pre></td></tr></table></figure></p><p>即可</p><p>第二种<br>在命令行下输入 regedit ,编辑注册表<br>找到下面目录位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/TimeZoneInformation/</span><br></pre></td></tr></table></figure><p>添加一项类型为：REG_DDWORD 的键值，命名为： RealTimeIsUniversal，值为 1, 然后重启</p><h3><span id="windows-下的解压文件在-linux-下中文名乱码问题">Windows 下的解压文件在 Linux 下中文名乱码问题</span></h3><p>Windows下的中文文件名默认编码为 <code>GBK</code>，Linux 下的中文文件名编码默认为 <code>UTF-8</code>， 在 Windows 下打包压缩的 <code>zip</code> 文件放到Linux下解压缩后会呈现出乱码。</p><p>解决的方法有很多种，原理都是在解压缩的时候将字符编码参数转换为 <code>UTF-8</code>，同样适用于单文件名。</p><p>一种简单粗暴，但十分有效的方法：<br>使用 <code>unar</code> 工具，<code>unar</code> 会自动检测文件的编码，特别适用于文件编码不知道的情况下，当然也可以通过 -e 参数来指定文件编码。</p><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install unar</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unar 中文文件.zip</span><br></pre></td></tr></table></figure></p><h3><span id="配置-zsh">配置 zsh</span></h3><p>zsh 使用 oh-my-zsh。<br>zsh 作为一种终端工具，它的高亮和自动补全功能一直是最大的亮点，同时也支持多种主题的配置。安装zsh 我是参照的网上 Jim 老哥的<a href="http://www.cnblogs.com/EasonJim/p/7863099.html" target="_blank" rel="noopener">博客</a>,<br>想要配置的同学请自行取用，这里就不复制粘帖了。</p><h3><span id="ubuntu管理密钥">Ubuntu管理密钥</span></h3><p>在Ubuntu下使用文件管理器连接 ftp 是十分方便的，但是曾经不小心点了永久记住密码，导致想忘记密码后使用其他用户名的时候不能忘记密码。<br>实用工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seahorse</span><br></pre></td></tr></table></figure></p><p>这个工具能够查看系统中存储的密钥环，找到你的ftp地址，进行删除即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu config" scheme="https://onlycaptain.github.io/categories/Ubuntu-config/"/>
    
    
      <category term="Ubuntu Application" scheme="https://onlycaptain.github.io/tags/Ubuntu-Application/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统备份</title>
    <link href="https://onlycaptain.github.io/2018/08/19/Ubuntu%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD/"/>
    <id>https://onlycaptain.github.io/2018/08/19/Ubuntu系统备份/</id>
    <published>2018-08-18T17:10:06.000Z</published>
    <updated>2018-08-18T18:36:47.083Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><p>由于比较简单，只放命令不多解释，感兴趣的同学自行查看tar帮助文档</p><h2><span id="备份根目录">备份根目录 ‘/‘</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_backup@`date +%Y-%m+%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/boot --exclude=/home --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run /</span><br></pre></td></tr></table></figure><h2><span id="备份启动目录-boot">备份启动目录 ‘/boot’</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_boot_backup@`date +%Y-%m-%d`.tar.gz /boot</span><br></pre></td></tr></table></figure><h2><span id="备份用户目录-home">备份用户目录 ‘/home’</span></h2><p>sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_home_backup@<code>date +%Y-%m-%d</code>.tar.gz /home</p><blockquote><p>其中media是挂载硬盘目录</p></blockquote><h2><span id="单份脚本文件">单份脚本文件：</span></h2><p>&emsp;&emsp;备份系统是一件耗时的事，通常会选在睡觉之前使用脚本文件备份<br><code>backup.sh</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_backup@`date +%Y-%m+%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/boot --exclude=/home --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run /</span><br><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_boot_backup@`date +%Y-%m-%d`.tar.gz /boot</span><br><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_home_backup@`date +%Y-%m-%d`.tar.gz /home</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/tags/Ubuntu/"/>
    
      <category term="system" scheme="https://onlycaptain.github.io/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下安装shadowsocks</title>
    <link href="https://onlycaptain.github.io/2018/08/19/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85shadowsocks/"/>
    <id>https://onlycaptain.github.io/2018/08/19/Ubuntu下安装shadowsocks/</id>
    <published>2018-08-18T17:01:46.000Z</published>
    <updated>2018-08-18T18:37:16.099Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><h2><span id="安装背景">安装背景</span></h2><p>&emsp;之前在Ubuntu系统上配置过多种科学上网方式，我尽可能地挑选在windows下和<br>在Ubuntu下体验一致的配置方法。（双系统来回切换不想适应两种习惯)</p><p>&emsp;我使用的vpn是shadowsocks 服务，不了解SSR 的vpn服务是否也能用这种配置方法。</p><h2><span id="安装shadowsocks">安装Shadowsocks</span></h2><p>在下面的链接下载ShadowSocks-Qt5 V3.0.0</p><blockquote><p>[<a href="https://github.com/shadowsocks/shadowsocks-qt5/releases]" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-qt5/releases]</a></p></blockquote><p>注意下载尾缀为 <code>.AppImage</code> 的文件。</p><p>将下载后的AppImage文件放置在固定的位置，例如主目录下新建一个<code>shadowsocks</code>目录，<br>然后赋予其执行权限。</p><p>下面是我运行的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir shadowsocks</span><br><span class="line">mv Shadowsocks-Qt5-3.0.0-x86_64.AppImage shadowsocks/</span><br><span class="line">sudo chmod a+x Shadowsocks-Qt5-3.0.0-x86_64.AppImage</span><br></pre></td></tr></table></figure><p>当要运行时, 简单的方法是执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Shadowsocks-Qt5-3.0.0-x86_64.AppImage</span><br></pre></td></tr></table></figure></p><p>为了便捷使用，可以创建一个<code>.desktop</code> 文件，将其当作应用来使用。<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim shadowsocks.desktop</span><br></pre></td></tr></table></figure></p><p>将下面的代码复制进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=V3.0.0Alpha</span><br><span class="line">Name=Shadowsocks</span><br><span class="line">Name[en_US]=Shadowsocks</span><br><span class="line">Name[zh_CN]=影梭</span><br><span class="line">Comment=shadowsocks qt application</span><br><span class="line">Exec=/home/zhanjzh/shadowsocks/Shadowsocks-Qt5-3.0.0-x86_64.AppImage</span><br><span class="line">Icon=/home/zhanjzh/shadowsocks/shadowsocks.jpeg</span><br><span class="line">StartupNotify=true</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Applicatin;Internet;</span><br><span class="line">MimeType=application/shadowsocks</span><br></pre></td></tr></table></figure><p>其中 <code>Exec</code> 和 <code>Icon</code> 的路径请自行改为自己的路径。<br>此处参考： [<a href="https://blog.csdn.net/lwjdgl/article/details/49204659]" target="_blank" rel="noopener">https://blog.csdn.net/lwjdgl/article/details/49204659]</a></p><p>保存，退出后，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv shadowsocks.desktop /usr/share/applications</span><br></pre></td></tr></table></figure></p><p>然后可以在系统的应用中就能找到名为 <code>影梭</code> 或 <code>shadowsocks</code> 的快捷方式。<br>可以将其添加进收藏夹，以后要使用的话，双击即可。</p><h2><span id="配置pac">配置pac</span></h2><p>配置pac的原因：pac作用是过滤被墙的网站，未被屏蔽的网站不走shadowsocks代理。<br>一方面减少流量负担，一方面不影响国内正常网站的访问速度。</p><p>配置：<br>默认装好pip，若未安装，运行下面命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure></p><p>安装GenPAC：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install genpac</span><br><span class="line">pip install --upgrade genpac</span><br></pre></td></tr></table></figure></p><p>下载gfwlist:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genpac --pac-proxy &quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=&quot;autoproxy.pac&quot;</span><br></pre></td></tr></table></figure></p><p>全局代理设置：<br>打开系统设置，选择网络-&gt;网络代理，将网络代理设置为自动，下方的配置URL方框里面填上<br>autoproxy.pac 所在的位置，例如：</p><blockquote><p>file:///home/zhanjzh/autoproxy.pac</p></blockquote><p>完成。</p><hr><p>很久之前配置过的东西，突然记起来写个备忘录。<br>如果有问题请联系我。 zhanjzh</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/tags/Ubuntu/"/>
    
      <category term="Application" scheme="https://onlycaptain.github.io/tags/Application/"/>
    
  </entry>
  
  <entry>
    <title>修复Ubuntu下驱动错误</title>
    <link href="https://onlycaptain.github.io/2018/08/19/%E4%BF%AE%E5%A4%8DUbuntu%E4%B8%8B%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E9%94%99%E8%AF%AF/"/>
    <id>https://onlycaptain.github.io/2018/08/19/修复Ubuntu下显卡驱动错误/</id>
    <published>2018-08-18T16:53:40.000Z</published>
    <updated>2018-11-01T09:32:20.998Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><h2><span id="前景说明">前景说明</span></h2><blockquote><p>之前因为装Nvidia的驱动过程中尝试过降级内核，然后降级失败<br>内核崩溃。尝试重装内核修复完成后，进入系统发现系统中网卡驱动<br>全部丢失。具体表现为：<br>执行命令：ifconfig -a 出来的结果只有本地回环 <code>lo</code> 。</p></blockquote><h2><span id="修复步骤">修复步骤：</span></h2><p>&ensp;找到当初装系统时候的启动U盘，从里面提取 <code>dkms_2.3-3ubuntu9.2_all.deb</code> 文件和 <code>bcmwl-kernel-source_6.30.223.271+bdcom-0ubuntu4_amd64.deb</code> 文件。<br>（如果没有的话也不必急着去重新制作系统启动盘，一般只要有当初安装的<code>iso</code>文件，就能从系统镜像中提取出来。</p><p>具体位置分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 18.0/pool/main/d/dkms/dkms_2.3-3ubuntu9.2_all.deb</span><br><span class="line"></span><br><span class="line">Ubuntu 18.0/pool/restricted/b/bcmwl/bcmwl-kernel-source_6.30.223.271+bdcom-0ubuntu4_amd64.deb</span><br></pre></td></tr></table></figure></p><p>取出后运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i dkms_2.3-3ubuntu9.2_all.deb</span><br><span class="line">sudo dpkg -i bcmwl-kernel-source_6.30.223.271+bdcom-0ubuntu4_amd64.deb</span><br></pre></td></tr></table></figure></p><p>之后运行 <code>ifconfig</code> 检测一下，若还是只有本地回环<code>lo</code>，请重启再检测。</p><p>一般重启过后就会发现驱动已经恢复正常。</p><h2><span id="题外话">题外话</span></h2><p>&emsp;顺带一提，当初在我的旧电脑上安装Ubuntu时出现过 <code>broadcom</code> 网卡驱动没能预安装的情况，上面的修复过程同样适用。注意：网卡为 <code>broadcom</code> 类型的一般Ubuntu不会预安装，网上的驱动七七八八难找的要命，<code>broadcom</code> 官网也不提供某些型号的驱动下载，用上面这种方式比较方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>修复Ubuntu系统内核崩溃错误</title>
    <link href="https://onlycaptain.github.io/2018/08/19/%E4%BF%AE%E5%A4%8DUbuntu%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E5%B4%A9%E6%BA%83%E9%94%99%E8%AF%AF/"/>
    <id>https://onlycaptain.github.io/2018/08/19/修复Ubuntu系统内核崩溃错误/</id>
    <published>2018-08-18T16:40:56.000Z</published>
    <updated>2018-08-18T16:52:03.099Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><h2><span id="前景说明">前景说明：</span></h2><blockquote><p>在安装Nvidia显卡时尝试降级内核失败，导致系统崩溃<br>笔记本电脑配置为：msi 电脑，GTX 1050 ti,<br>对Ubuntu下安装显卡感兴趣的可以参考我另一篇博客</p></blockquote><h2><span id="修复步骤">修复步骤</span></h2><blockquote><p>自行准备 Live-cd，实际上就是当初装系统用的启动盘。</p></blockquote><p>首先，进入Live-cd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure></p><p>列出磁盘信息，根据文件系统和分区大小判断出 根目录 / 所在分区<br>例如我的就是 <code>/dev/sda3</code></p><p>之后挂载根目录以及旗下的一系列目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sda3 /mnt</span><br><span class="line">sudo mount --bind /dev /mnt/dev</span><br><span class="line">sudo mount --bind /proc /mnt/proc</span><br><span class="line">sudo mount --bind /sys /mnt/sys</span><br><span class="line">sudo cp /etc/resolv.conf /mnt/etc</span><br></pre></td></tr></table></figure><p>之后，如果你的boot目录是自己额外分区的（一般不会，但是我当初安装时搞事情额外分区了）<br>那么你就需要再找到boot目录对应的分区，例如我的分区就是 <code>/dev/sda5</code>.<br>若你额外分区之后又没有挂载，那么接下来的命令你可能会失败。</p><p>使用chroot命令进入系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot /mnt</span><br></pre></td></tr></table></figure><p>—— 分割线 ——-</p><h2><span id="attention">Attention!</span></h2><p>这时请注意，通过命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /boot/</span><br></pre></td></tr></table></figure><p>查看boot目录下是否有系统启动需要的内核，例如：<br><code>vmlinuz-4.0.15-22-generic</code><br>这样的东西，若没有需要自己重新安装，或者使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-image-generic</span><br></pre></td></tr></table></figure><p>安装完毕之后，请确保执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>可以说这条命令是修系统的核心了，若没有执行这条命令，grub的配置<br>文件就不会被修改，就算前面做了再多也是无用功。<br>之后，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">sudo umount /mnt/sys</span><br><span class="line">sudo umount /mnt/proc</span><br><span class="line">sudo umount /mnt/dev</span><br><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure><p>PS: 如果你跟我一样自己额外挂载了boot目录，那么你首先需要卸载 /mnt/boot<br>在执行 sudo umount /mnt 之前需要执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /mnt/boot</span><br></pre></td></tr></table></figure></p><p>然后，推荐关机之后再重启，因为你需要时间拔掉你的live-cd。</p><p>这时，进入引导项后，grub就应该找得到你的内核，不会再出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: file &apos;/vmlinuz-4.15.0-22-generic&apos; not found  </span><br><span class="line">error: you need to load the kernel first</span><br></pre></td></tr></table></figure></p><p>如果此时你的windows启动项不见了请不用慌张，进入Ubuntu系统或者<br>Advance ubuntu 选项，使用<code>recovery mode</code> 进入系统，总之进入Ubuntu系统后<br>再次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></p><p>命令。然后重启，可以看到一切恢复正常。</p><p>参考了网上的教程以及论坛里的分析，根据自己系统的实际情况编写此教程，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下Nvidia驱动安装</title>
    <link href="https://onlycaptain.github.io/2018/08/18/Ubuntu%E4%B8%8BNvidia%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/"/>
    <id>https://onlycaptain.github.io/2018/08/18/Ubuntu下Nvidia驱动安装/</id>
    <published>2018-08-18T13:18:04.000Z</published>
    <updated>2018-08-18T18:36:13.123Z</updated>
    
    <content type="html"><![CDATA[<p>@author:zhanjzh</p><a id="more"></a> <p>安装过程同大多数人一样十分折腾，所以在这里一些常见的错误就不记录了下面记录一下具体的安装过程，以及一些问题的十分有意义的解决方案。</p><p>在Nvidia官网上下载相应的驱动，注意版本选择，不需要选择最新的版本，也不需要刻意挑一个老的版本，beta字眼的尤其要避免。</p><h2><span id="安装过程">安装过程：</span></h2><p>下载安装驱动的runfile，名字大致是：<br><code>NVIDIA-Linux-x86_64-390.42.run</code></p><p>赋予执行权限：</p><blockquote><p>chmod +x NVIDIA-Linux-x86_64-390.42.run</p></blockquote><p>开始安装：</p><blockquote><p>sudo ./NVIDIA-Linux-x86_64-390.42.run -no-x-check -no-nouveau-check -no-opengl-files</p></blockquote><p>本来安装 Nvidia驱动需要关闭 nouveau 驱动和图形界面，加上后面的参数后就不需要那么繁琐，最后一个opengl的参数十分关键，不加上去有可能安装过后重启时会出现循环登录。</p><p>安装过程中出现的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. There appears to already be a driver installed on your system (version:      </span><br><span class="line">  390.42).  As part of installing this driver (version: 390.42), the existing  </span><br><span class="line">  driver will be uninstalled.  Are you sure you want to continue?</span><br><span class="line"></span><br><span class="line">                 Continue installation      Abort installation </span><br><span class="line"></span><br><span class="line">（选择 Coninue，如果是重装的话）</span><br><span class="line">2. The distribution-provided pre-install script failed!  Are you sure you want</span><br><span class="line">  to continue?                                                                 </span><br><span class="line">       </span><br><span class="line">                 Continue installation      Abort installation       </span><br><span class="line">（选择 Cotinue)</span><br><span class="line">3. Would you like to register the kernel module sources with DKMS? This will    </span><br><span class="line">  allow DKMS to automatically build a new module, if you install a different   </span><br><span class="line">  kernel later.</span><br><span class="line"></span><br><span class="line">                          Yes                       No  </span><br><span class="line">（这里选 No）</span><br><span class="line">4. Install NVIDIA&apos;s 32-bit compatibility libraries?</span><br><span class="line">                                                                               </span><br><span class="line">                          Yes                       No  </span><br><span class="line">（这里选 No）</span><br><span class="line">5. Installation of the kernel module for the NVIDIA Accelerated Graphics Driver</span><br><span class="line">  for Linux-x86_64 (version 390.42) is now complete.                           </span><br><span class="line">                                                                       </span><br><span class="line">                                       OK</span><br></pre></td></tr></table></figure></p><p>因为自己也重装了好几次，不断探索过哪些解决方案是可行的，大大小小的问题都遇见过，其中可能会出现的一些问题较严重的，我会简要介绍一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 安装最后出现 nvidia-drm 模块问题</span><br><span class="line">Unable to load the “nvidia-drm” kernel module</span><br><span class="line">ERROR: Installation has failed. Please see the file &apos;/var/log/nvidia-installer.log&apos; for details. You may find suggestions on fixing installation problems in the README available on the Linux driver download page at www.nvidia.com.</span><br></pre></td></tr></table></figure><p>这个问题一开始困扰了我许久，总是提示安装失败，后来发现，即使他提示是这个，但实际上是安装成功了，出现这个问题主要是后面的配置文件中将nvidia-drm 模块给禁用掉。在安装过程中，出现这个问题不用理，后面我会再次提及。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2. 运行 `nvidia-smi` 命令提示出错</span><br><span class="line">NVIDIA-SMI has failed because it couldn&apos;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.</span><br><span class="line">这个问题比较坑，网上说法要不就是重启一下就能解决，要不就是切换内核。</span><br><span class="line">（实际上，我都尝试过，重启在我电脑上不靠谱，切换内核由于我安装的Ubuntu 18.04</span><br><span class="line">中的内核就是当前时间的最新内核，曾经考虑过是不是内核太新了，于是降级内核，然后</span><br><span class="line">把系统内核搞崩了。不建议尝试切换内核。）</span><br></pre></td></tr></table></figure><p>网上查找到的博客没能解决我的问题，后来去 Nvidia 官网论坛上寻找客服人员的解决方案在一个帖子上发现了重要的线索：<br>[<a href="https://devtalk.nvidia.com/default/topic/1037021/linux/ubuntu-18-04-on-asus-zenbook-ux550ve-crashes-soon-after-boot-to-desktop/]" target="_blank" rel="noopener">https://devtalk.nvidia.com/default/topic/1037021/linux/ubuntu-18-04-on-asus-zenbook-ux550ve-crashes-soon-after-boot-to-desktop/]</a></p><p>这里面客服人员提到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;No, ubuntu just seems have an alias set to turn off the nvidia driver.</span><br><span class="line">run</span><br><span class="line">grep nvidia /etc/modprobe.d</span><br><span class="line">and look for something like</span><br><span class="line">alias nvidia-drm off</span><br><span class="line">and </span><br><span class="line">alias nvidia-modprobe off</span><br><span class="line">and remove that file. &quot;</span><br></pre></td></tr></table></figure></p><p>然后在 /etc/modprobe.d/blacklist-nvidia.conf 里面发现了这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Do not modify</span><br><span class="line"># This file was generated by nvidia-prime</span><br><span class="line">blacklist nvidia</span><br><span class="line">blacklist nvidia-drm</span><br><span class="line">blacklist nvidia-modeset</span><br><span class="line">alias nvidia off</span><br><span class="line">alias nvidia-drm off</span><br><span class="line">alias nvidia-modeset off</span><br></pre></td></tr></table></figure></p><p>注意后面三句话，可以说十分尴尬了这里将 nvidia 的三个模块全部禁用掉，安装过程和执行 nvidia-smi 过程在这里翻车了。</p><p>解决方案就是更改此文件，将后面三句话加上注释或者直接：</p><blockquote><p>sudo mv blacklist-nvidia.conf blacklist-nvidia.conf.bak</p></blockquote><p>之后运行 nvidia-smi 就很顺利，如果你对上面的drm模块安装不放心的话也可以选择再次安装 nvidia 驱动，之后你会发现安装过程十分流畅。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author:zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/tags/Ubuntu/"/>
    
      <category term="Nvidia" scheme="https://onlycaptain.github.io/tags/Nvidia/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL配置</title>
    <link href="https://onlycaptain.github.io/2018/05/21/openGL%E9%85%8D%E7%BD%AE/"/>
    <id>https://onlycaptain.github.io/2018/05/21/openGL配置/</id>
    <published>2018-05-21T15:20:39.000Z</published>
    <updated>2018-08-19T09:47:50.220Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a> <p>由于计算机图形学课程需要，在网上查找了如何配置OpenGL的教程。由于之前配置过OpenGL的glut版本，这里配置的是带glfw、glew、glm库的OpenGL，使用环境是visual studio 2017。</p><p>如果想了解配置glut版本，请查看教程：<a href="https://blog.csdn.net/qq_29698809/article/details/75200562" target="_blank" rel="noopener">glut</a></p><h2><span id="配置过程">配置过程</span></h2><ol><li><p>网上下载glfw、glew、glm的预编译版本，也可以直接选择下载源码下来自己编译，windows下只需使用vs2017自带的cmake编译即可，Linux就更简单了。关于如何使用CMAKE，请自行google。</p></li><li><p>这里提供三个库的下载链接，目前链接是有效的，如果出现访问不了的情况，可能需要科学上网： <a href="http://www.glfw.org/" target="_blank" rel="noopener">glfw</a> 、<a href="http://glew.sourceforge.net/" target="_blank" rel="noopener">glew</a>、 <a href="https://sourceforge.net/projects/ogl-math/" target="_blank" rel="noopener">glm</a> </p><p>注： 这里glew与glm下载是预编译版本，无需自己编译，但glfw我使用的是下载源码后自行编译，因为下载下来的预编译版本有某些文件对不上。如果想偷懒，可以直接下载我打包完成后的文件：<a href="https://pan.baidu.com/s/1O6F8Tdthy2aeeGIFcKNjpg" target="_blank" rel="noopener">source</a>  密码：6cu7</p></li><li><p>配置glut时，是将头文件和库文件直接放在Visual Studio 2017 的安装目录下  (VC\Tools\MSVC\14.13.26128\include\gl  &amp;&amp; VC\Tools\MSVC\14.13.26128\lib\x86), 但这里我打算直接放在Project下，通过命令引入，头文件可以直接include，至于lib库文件在网上查找到引入命令：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"path to libs"</span>)</span></span><br></pre></td></tr></table></figure><p>通过预编译处理可链接当前目录下的lib库。</p></li><li><p>在上面下载的三个库中，找出下面对应的文件：</p><ol><li><p>glfw：<img src="../media/1526922099031.png" alt="1526922099031"></p></li><li><p>glm：</p><p><img src="../media/1526922119803.png" alt="1526922119803"></p></li><li><p>glew:</p><p><img src="../media/1526922170704.png" alt="1526922170704"></p></li><li><p>以及与它们相关的lib文件，这里统一列出：</p><p><img src="../media/1526922268708.png" alt="1526922268708"></p></li></ol></li><li><p>然后放在对应文件夹里面，便于管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├─GL</span><br><span class="line">│      eglew.h</span><br><span class="line">│      glew.h</span><br><span class="line">│      glxew.h</span><br><span class="line">│      wglew.h</span><br><span class="line">│      </span><br><span class="line">├─GLFW</span><br><span class="line">│      glfw3.h</span><br><span class="line">│      glfw3native.h</span><br><span class="line">│      </span><br><span class="line">├─glm</span><br><span class="line">│  │  ext.hpp</span><br><span class="line">│  │  glm.hpp</span><br><span class="line">│  │  </span><br><span class="line">│  ├─core  <span class="comment">// 文件夹</span></span><br><span class="line">│  │      </span><br><span class="line">│  ├─gtc  <span class="comment">// 文件夹</span></span><br><span class="line">│  │      </span><br><span class="line">│  ├─gtx  <span class="comment">// 文件夹</span></span><br><span class="line">│  │      </span><br><span class="line">│  └─virtrev  <span class="comment">//文件夹</span></span><br><span class="line">│          </span><br><span class="line">└─libs</span><br><span class="line">        glew32.lib</span><br><span class="line">        glew32s.lib</span><br><span class="line">        glfw3.lib</span><br></pre></td></tr></table></figure></li><li><p>新建你的project，找到你的源文件(.cpp) 文件目录下，将上述这几个文件夹复制进去，在我的电脑上为：</p><p><img src="../media/1526922637473.png" alt="1526922637473"></p></li><li><p>新建solution.h 即上面那个头文件，将下面引用代码放进去：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SOLUTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SOLUTION_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GL/glew.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GLFW/glfw3.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"glm/glm.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"opengl32.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"libs/glfw3.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"libs/glew32s.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>尝试运行测试代码：</p><p><a href="https://learnopengl.com/code_viewer.php?code=getting-started/hellotriangle" target="_blank" rel="noopener">你好，三角形</a> </p><p>注：<strong>在代码前面include的时候，记得将solution.h 文件include 进去，并删去多余的include，切记！</strong></p></li></ol><h2><span id="运行结果">运行结果</span></h2><p>如果输出结果 为：</p><p><img src="../media/1526923214110.png" alt="1526923214110"></p><p>则一切正常，配置完成。</p><p>author： zhanjzh</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
