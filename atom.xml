<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Captain&#39;s blog</title>
  
  <subtitle>Zhanjzh</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onlycaptain.github.io/"/>
  <updated>2018-08-18T18:36:47.083Z</updated>
  <id>https://onlycaptain.github.io/</id>
  
  <author>
    <name>zhanjzh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu系统备份</title>
    <link href="https://onlycaptain.github.io/2018/08/19/Ubuntu%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD/"/>
    <id>https://onlycaptain.github.io/2018/08/19/Ubuntu系统备份/</id>
    <published>2018-08-18T17:10:06.000Z</published>
    <updated>2018-08-18T18:36:47.083Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><p>由于比较简单，只放命令不多解释，感兴趣的同学自行查看tar帮助文档</p><h2 id="备份根目录-‘-‘"><a href="#备份根目录-‘-‘" class="headerlink" title="备份根目录 ‘/‘"></a>备份根目录 ‘/‘</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_backup@`date +%Y-%m+%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/boot --exclude=/home --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run /</span><br></pre></td></tr></table></figure><h2 id="备份启动目录-‘-boot’"><a href="#备份启动目录-‘-boot’" class="headerlink" title="备份启动目录 ‘/boot’"></a>备份启动目录 ‘/boot’</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_boot_backup@`date +%Y-%m-%d`.tar.gz /boot</span><br></pre></td></tr></table></figure><h2 id="备份用户目录-‘-home’"><a href="#备份用户目录-‘-home’" class="headerlink" title="备份用户目录 ‘/home’"></a>备份用户目录 ‘/home’</h2><p>sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_home_backup@<code>date +%Y-%m-%d</code>.tar.gz /home</p><blockquote><p>其中media是挂载硬盘目录</p></blockquote><h2 id="单份脚本文件："><a href="#单份脚本文件：" class="headerlink" title="单份脚本文件："></a>单份脚本文件：</h2><p>&emsp;&emsp;备份系统是一件耗时的事，通常会选在睡觉之前使用脚本文件备份<br><code>backup.sh</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_backup@`date +%Y-%m+%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/boot --exclude=/home --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run /</span><br><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_boot_backup@`date +%Y-%m-%d`.tar.gz /boot</span><br><span class="line">sudo tar -cvpzf /media/zhanjzh/zhanjzh/ubuntu_home_backup@`date +%Y-%m-%d`.tar.gz /home</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/tags/Ubuntu/"/>
    
      <category term="system" scheme="https://onlycaptain.github.io/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下安装shadowsocks</title>
    <link href="https://onlycaptain.github.io/2018/08/19/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85shadowsocks/"/>
    <id>https://onlycaptain.github.io/2018/08/19/Ubuntu下安装shadowsocks/</id>
    <published>2018-08-18T17:01:46.000Z</published>
    <updated>2018-08-18T18:37:16.099Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><h2 id="安装背景"><a href="#安装背景" class="headerlink" title="安装背景"></a>安装背景</h2><p>&emsp;之前在Ubuntu系统上配置过多种科学上网方式，我尽可能地挑选在windows下和<br>在Ubuntu下体验一致的配置方法。（双系统来回切换不想适应两种习惯)</p><p>&emsp;我使用的vpn是shadowsocks 服务，不了解SSR 的vpn服务是否也能用这种配置方法。</p><h2 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h2><p>在下面的链接下载ShadowSocks-Qt5 V3.0.0</p><blockquote><p>[<a href="https://github.com/shadowsocks/shadowsocks-qt5/releases]" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-qt5/releases]</a></p></blockquote><p>注意下载尾缀为 <code>.AppImage</code> 的文件。</p><p>将下载后的AppImage文件放置在固定的位置，例如主目录下新建一个<code>shadowsocks</code>目录，<br>然后赋予其执行权限。</p><p>下面是我运行的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir shadowsocks</span><br><span class="line">mv Shadowsocks-Qt5-3.0.0-x86_64.AppImage shadowsocks/</span><br><span class="line">sudo chmod a+x Shadowsocks-Qt5-3.0.0-x86_64.AppImage</span><br></pre></td></tr></table></figure><p>当要运行时, 简单的方法是执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Shadowsocks-Qt5-3.0.0-x86_64.AppImage</span><br></pre></td></tr></table></figure></p><p>为了便捷使用，可以创建一个<code>.desktop</code> 文件，将其当作应用来使用。<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim shadowsocks.desktop</span><br></pre></td></tr></table></figure></p><p>将下面的代码复制进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=V3.0.0Alpha</span><br><span class="line">Name=Shadowsocks</span><br><span class="line">Name[en_US]=Shadowsocks</span><br><span class="line">Name[zh_CN]=影梭</span><br><span class="line">Comment=shadowsocks qt application</span><br><span class="line">Exec=/home/zhanjzh/shadowsocks/Shadowsocks-Qt5-3.0.0-x86_64.AppImage</span><br><span class="line">Icon=/home/zhanjzh/shadowsocks/shadowsocks.jpeg</span><br><span class="line">StartupNotify=true</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Applicatin;Internet;</span><br><span class="line">MimeType=application/shadowsocks</span><br></pre></td></tr></table></figure><p>其中 <code>Exec</code> 和 <code>Icon</code> 的路径请自行改为自己的路径。<br>此处参考： [<a href="https://blog.csdn.net/lwjdgl/article/details/49204659]" target="_blank" rel="noopener">https://blog.csdn.net/lwjdgl/article/details/49204659]</a></p><p>保存，退出后，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv shadowsocks.desktop /usr/share/applications</span><br></pre></td></tr></table></figure></p><p>然后可以在系统的应用中就能找到名为 <code>影梭</code> 或 <code>shadowsocks</code> 的快捷方式。<br>可以将其添加进收藏夹，以后要使用的话，双击即可。</p><h2 id="配置pac"><a href="#配置pac" class="headerlink" title="配置pac"></a>配置pac</h2><p>配置pac的原因：pac作用是过滤被墙的网站，未被屏蔽的网站不走shadowsocks代理。<br>一方面减少流量负担，一方面不影响国内正常网站的访问速度。</p><p>配置：<br>默认装好pip，若未安装，运行下面命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure></p><p>安装GenPAC：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install genpac</span><br><span class="line">pip install --upgrade genpac</span><br></pre></td></tr></table></figure></p><p>下载gfwlist:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genpac --pac-proxy &quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=&quot;autoproxy.pac&quot;</span><br></pre></td></tr></table></figure></p><p>全局代理设置：<br>打开系统设置，选择网络-&gt;网络代理，将网络代理设置为自动，下方的配置URL方框里面填上<br>autoproxy.pac 所在的位置，例如：</p><blockquote><p>file:///home/zhanjzh/autoproxy.pac</p></blockquote><p>完成。</p><hr><p>很久之前配置过的东西，突然记起来写个备忘录。<br>如果有问题请联系我。 zhanjzh</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/tags/Ubuntu/"/>
    
      <category term="Application" scheme="https://onlycaptain.github.io/tags/Application/"/>
    
  </entry>
  
  <entry>
    <title>修复Ubuntu下显卡驱动错误</title>
    <link href="https://onlycaptain.github.io/2018/08/19/%E4%BF%AE%E5%A4%8DUbuntu%E4%B8%8B%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E9%94%99%E8%AF%AF/"/>
    <id>https://onlycaptain.github.io/2018/08/19/修复Ubuntu下显卡驱动错误/</id>
    <published>2018-08-18T16:53:40.000Z</published>
    <updated>2018-08-18T16:59:39.955Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><h2 id="前景说明"><a href="#前景说明" class="headerlink" title="前景说明"></a>前景说明</h2><blockquote><p>之前因为装Nvidia的驱动过程中尝试过降级内核，然后降级失败<br>内核崩溃。尝试重装内核修复完成后，进入系统发现系统中网卡驱动<br>全部丢失。具体表现为：<br>执行命令：ifconfig -a 出来的结果只有本地回环 <code>lo</code> 。</p></blockquote><h2 id="修复步骤："><a href="#修复步骤：" class="headerlink" title="修复步骤："></a>修复步骤：</h2><p>&ensp;找到当初装系统时候的启动U盘，从里面提取 <code>dkms_2.3-3ubuntu9.2_all.deb</code> 文件和 <code>bcmwl/bcmwl-kernel-source_6.30.223.271+bdcom-0ubuntu4_amd64.deb</code> 文件。<br>（如果没有的话也不必急着去重新制作系统启动盘，一般只要有当初安装的<code>iso</code>文件，就能从系统镜像中提取出来。</p><p>具体位置分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 18.0/pool/main/d/dkms/dkms_2.3-3ubuntu9.2_all.deb</span><br><span class="line"></span><br><span class="line">Ubuntu 18.0/pool/restricted/b/bcmwl/bcmwl-kernel-source_6.30.223.271+bdcom-0ubuntu4_amd64.deb</span><br></pre></td></tr></table></figure></p><p>取出后运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i dkms_2.3-3ubuntu9.2_all.deb</span><br><span class="line">sudo dpkg -i bcmwl/bcmwl-kernel-source_6.30.223.271+bdcom-0ubuntu4_amd64.deb</span><br></pre></td></tr></table></figure></p><p>之后运行 <code>ifconfig</code> 检测一下，若还是只有本地回环<code>lo</code>，请重启再检测。</p><p>一般重启过后就会发现驱动已经恢复正常。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>&emsp;顺带一提，当初在我的旧电脑上安装Ubuntu时出现过 <code>broadcom</code> 网卡驱动没能预安装的情况，上面的修复过程同样适用。注意：网卡为 <code>broadcom</code> 类型的一般Ubuntu不会预安装，网上的驱动七七八八难找的要命，<code>broadcom</code> 官网也不提供某些型号的驱动下载，用上面这种方式最为方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>修复Ubuntu系统内核崩溃错误</title>
    <link href="https://onlycaptain.github.io/2018/08/19/%E4%BF%AE%E5%A4%8DUbuntu%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E5%B4%A9%E6%BA%83%E9%94%99%E8%AF%AF/"/>
    <id>https://onlycaptain.github.io/2018/08/19/修复Ubuntu系统内核崩溃错误/</id>
    <published>2018-08-18T16:40:56.000Z</published>
    <updated>2018-08-18T16:52:03.099Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a><h2 id="前景说明："><a href="#前景说明：" class="headerlink" title="前景说明："></a>前景说明：</h2><blockquote><p>在安装Nvidia显卡时尝试降级内核失败，导致系统崩溃<br>笔记本电脑配置为：msi 电脑，GTX 1050 ti,<br>对Ubuntu下安装显卡感兴趣的可以参考我另一篇博客</p></blockquote><h2 id="修复步骤"><a href="#修复步骤" class="headerlink" title="修复步骤"></a>修复步骤</h2><blockquote><p>自行准备 Live-cd，实际上就是当初装系统用的启动盘。</p></blockquote><p>首先，进入Live-cd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure></p><p>列出磁盘信息，根据文件系统和分区大小判断出 根目录 / 所在分区<br>例如我的就是 <code>/dev/sda3</code></p><p>之后挂载根目录以及旗下的一系列目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sda3 /mnt</span><br><span class="line">sudo mount --bind /dev /mnt/dev</span><br><span class="line">sudo mount --bind /proc /mnt/proc</span><br><span class="line">sudo mount --bind /sys /mnt/sys</span><br><span class="line">sudo cp /etc/resolv.conf /mnt/etc</span><br></pre></td></tr></table></figure><p>之后，如果你的boot目录是自己额外分区的（一般不会，但是我当初安装时搞事情额外分区了）<br>那么你就需要再找到boot目录对应的分区，例如我的分区就是 <code>/dev/sda5</code>.<br>若你额外分区之后又没有挂载，那么接下来的命令你可能会失败。</p><p>使用chroot命令进入系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot /mnt</span><br></pre></td></tr></table></figure><p>—— 分割线 ——-</p><h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention!"></a>Attention!</h2><p>这时请注意，通过命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /boot/</span><br></pre></td></tr></table></figure><p>查看boot目录下是否有系统启动需要的内核，例如：<br><code>vmlinuz-4.0.15-22-generic</code><br>这样的东西，若没有需要自己重新安装，或者使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-image-generic</span><br></pre></td></tr></table></figure><p>安装完毕之后，请确保执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>可以说这条命令是修系统的核心了，若没有执行这条命令，grub的配置<br>文件就不会被修改，就算前面做了再多也是无用功。<br>之后，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">sudo umount /mnt/sys</span><br><span class="line">sudo umount /mnt/proc</span><br><span class="line">sudo umount /mnt/dev</span><br><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure><p>PS: 如果你跟我一样自己额外挂载了boot目录，那么你首先需要卸载 /mnt/boot<br>在执行 sudo umount /mnt 之前需要执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /mnt/boot</span><br></pre></td></tr></table></figure></p><p>然后，推荐关机之后再重启，因为你需要时间拔掉你的live-cd。</p><p>这时，进入引导项后，grub就应该找得到你的内核，不会再出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: file &apos;/vmlinuz-4.15.0-22-generic&apos; not found  </span><br><span class="line">error: you need to load the kernel first</span><br></pre></td></tr></table></figure></p><p>如果此时你的windows启动项不见了请不用慌张，进入Ubuntu系统或者<br>Advance ubuntu 选项，使用<code>recovery mode</code> 进入系统，总之进入Ubuntu系统后<br>再次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></p><p>命令。然后重启，可以看到一切恢复正常。</p><p>参考了网上的教程以及论坛里的分析，根据自己系统的实际情况编写此教程，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下Nvidia驱动安装</title>
    <link href="https://onlycaptain.github.io/2018/08/18/Ubuntu%E4%B8%8BNvidia%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/"/>
    <id>https://onlycaptain.github.io/2018/08/18/Ubuntu下Nvidia驱动安装/</id>
    <published>2018-08-18T13:18:04.000Z</published>
    <updated>2018-08-18T18:36:13.123Z</updated>
    
    <content type="html"><![CDATA[<p>@author:zhanjzh</p><a id="more"></a> <p>安装过程同大多数人一样十分折腾，所以在这里一些常见的错误就不记录了下面记录一下具体的安装过程，以及一些问题的十分有意义的解决方案。</p><p>在Nvidia官网上下载相应的驱动，注意版本选择，不需要选择最新的版本，也不需要刻意挑一个老的版本，beta字眼的尤其要避免。</p><h2 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h2><p>下载安装驱动的runfile，名字大致是：<br><code>NVIDIA-Linux-x86_64-390.42.run</code></p><p>赋予执行权限：</p><blockquote><p>chmod +x NVIDIA-Linux-x86_64-390.42.run</p></blockquote><p>开始安装：</p><blockquote><p>sudo ./NVIDIA-Linux-x86_64-390.42.run -no-x-check -no-nouveau-check -no-opengl-files</p></blockquote><p>本来安装 Nvidia驱动需要关闭 nouveau 驱动和图形界面，加上后面的参数后就不需要那么繁琐，最后一个opengl的参数十分关键，不加上去有可能安装过后重启时会出现循环登录。</p><p>安装过程中出现的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. There appears to already be a driver installed on your system (version:      </span><br><span class="line">  390.42).  As part of installing this driver (version: 390.42), the existing  </span><br><span class="line">  driver will be uninstalled.  Are you sure you want to continue?</span><br><span class="line"></span><br><span class="line">                 Continue installation      Abort installation </span><br><span class="line"></span><br><span class="line">（选择 Coninue，如果是重装的话）</span><br><span class="line">2. The distribution-provided pre-install script failed!  Are you sure you want</span><br><span class="line">  to continue?                                                                 </span><br><span class="line">       </span><br><span class="line">                 Continue installation      Abort installation       </span><br><span class="line">（选择 Cotinue)</span><br><span class="line">3. Would you like to register the kernel module sources with DKMS? This will    </span><br><span class="line">  allow DKMS to automatically build a new module, if you install a different   </span><br><span class="line">  kernel later.</span><br><span class="line"></span><br><span class="line">                          Yes                       No  </span><br><span class="line">（这里选 No）</span><br><span class="line">4. Install NVIDIA&apos;s 32-bit compatibility libraries?</span><br><span class="line">                                                                               </span><br><span class="line">                          Yes                       No  </span><br><span class="line">（这里选 No）</span><br><span class="line">5. Installation of the kernel module for the NVIDIA Accelerated Graphics Driver</span><br><span class="line">  for Linux-x86_64 (version 390.42) is now complete.                           </span><br><span class="line">                                                                       </span><br><span class="line">                                       OK</span><br></pre></td></tr></table></figure></p><p>因为自己也重装了好几次，不断探索过哪些解决方案是可行的，大大小小的问题都遇见过，其中可能会出现的一些问题较严重的，我会简要介绍一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 安装最后出现 nvidia-drm 模块问题</span><br><span class="line">Unable to load the “nvidia-drm” kernel module</span><br><span class="line">ERROR: Installation has failed. Please see the file &apos;/var/log/nvidia-installer.log&apos; for details. You may find suggestions on fixing installation problems in the README available on the Linux driver download page at www.nvidia.com.</span><br></pre></td></tr></table></figure><p>这个问题一开始困扰了我许久，总是提示安装失败，后来发现，即使他提示是这个，但实际上是安装成功了，出现这个问题主要是后面的配置文件中将nvidia-drm 模块给禁用掉。在安装过程中，出现这个问题不用理，后面我会再次提及。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2. 运行 `nvidia-smi` 命令提示出错</span><br><span class="line">NVIDIA-SMI has failed because it couldn&apos;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.</span><br><span class="line">这个问题比较坑，网上说法要不就是重启一下就能解决，要不就是切换内核。</span><br><span class="line">（实际上，我都尝试过，重启在我电脑上不靠谱，切换内核由于我安装的Ubuntu 18.04</span><br><span class="line">中的内核就是当前时间的最新内核，曾经考虑过是不是内核太新了，于是降级内核，然后</span><br><span class="line">把系统内核搞崩了。不建议尝试切换内核。）</span><br></pre></td></tr></table></figure><p>网上查找到的博客没能解决我的问题，后来去 Nvidia 官网论坛上寻找客服人员的解决方案在一个帖子上发现了重要的线索：<br>[<a href="https://devtalk.nvidia.com/default/topic/1037021/linux/ubuntu-18-04-on-asus-zenbook-ux550ve-crashes-soon-after-boot-to-desktop/]" target="_blank" rel="noopener">https://devtalk.nvidia.com/default/topic/1037021/linux/ubuntu-18-04-on-asus-zenbook-ux550ve-crashes-soon-after-boot-to-desktop/]</a></p><p>这里面客服人员提到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;No, ubuntu just seems have an alias set to turn off the nvidia driver.</span><br><span class="line">run</span><br><span class="line">grep nvidia /etc/modprobe.d</span><br><span class="line">and look for something like</span><br><span class="line">alias nvidia-drm off</span><br><span class="line">and </span><br><span class="line">alias nvidia-modprobe off</span><br><span class="line">and remove that file. &quot;</span><br></pre></td></tr></table></figure></p><p>然后在 /etc/modprobe.d/blacklist-nvidia.conf 里面发现了这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Do not modify</span><br><span class="line"># This file was generated by nvidia-prime</span><br><span class="line">blacklist nvidia</span><br><span class="line">blacklist nvidia-drm</span><br><span class="line">blacklist nvidia-modeset</span><br><span class="line">alias nvidia off</span><br><span class="line">alias nvidia-drm off</span><br><span class="line">alias nvidia-modeset off</span><br></pre></td></tr></table></figure></p><p>注意后面三句话，可以说十分尴尬了这里将 nvidia 的三个模块全部禁用掉，安装过程和执行 nvidia-smi 过程在这里翻车了。</p><p>解决方案就是更改此文件，将后面三句话加上注释或者直接：</p><blockquote><p>sudo mv blacklist-nvidia.conf blacklist-nvidia.conf.bak</p></blockquote><p>之后运行 nvidia-smi 就很顺利，如果你对上面的drm模块安装不放心的话也可以选择再次安装 nvidia 驱动，之后你会发现安装过程十分流畅。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author:zhanjzh&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://onlycaptain.github.io/tags/Ubuntu/"/>
    
      <category term="Nvidia" scheme="https://onlycaptain.github.io/tags/Nvidia/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL配置</title>
    <link href="https://onlycaptain.github.io/2018/05/21/openGL%E9%85%8D%E7%BD%AE/"/>
    <id>https://onlycaptain.github.io/2018/05/21/openGL配置/</id>
    <published>2018-05-21T15:20:39.000Z</published>
    <updated>2018-08-18T14:16:54.635Z</updated>
    
    <content type="html"><![CDATA[<p>@author: zhanjzh</p><a id="more"></a> <p>由于计算机图形学课程需要，在网上查找了如何配置OpenGL的教程。由于之前配置过OpenGL的glut版本，这里配置的是带glfw、glew、glm库的OpenGL，使用环境是visual studio 2017。</p><p>如果想了解配置glut版本，请查看教程：<a href="https://blog.csdn.net/qq_29698809/article/details/75200562" target="_blank" rel="noopener">glut</a></p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><ol><li><p>网上下载glfw、glew、glm的预编译版本，也可以直接选择下载源码下来自己编译，windows下只需使用vs2017自带的cmake编译即可，Linux就更简单了。关于如何使用CMAKE，请自行google。</p></li><li><p>这里提供三个库的下载链接，目前链接是有效的，如果出现访问不了的情况，可能需要科学上网： <a href="http://www.glfw.org/" target="_blank" rel="noopener">glfw</a> 、<a href="http://glew.sourceforge.net/" target="_blank" rel="noopener">glew</a>、 <a href="https://sourceforge.net/projects/ogl-math/" target="_blank" rel="noopener">glm</a> </p><p>注： 这里glew与glm下载是预编译版本，无需自己编译，但glfw我使用的是下载源码后自行编译，因为下载下来的预编译版本有某些文件对不上。如果想偷懒，可以直接下载我打包完成后的文件：<a href="https://pan.baidu.com/s/1O6F8Tdthy2aeeGIFcKNjpg" target="_blank" rel="noopener">source</a>  密码：6cu7</p></li><li><p>配置glut时，是将头文件和库文件直接放在Visual Studio 2017 的安装目录下  (VC\Tools\MSVC\14.13.26128\include\gl  &amp;&amp; VC\Tools\MSVC\14.13.26128\lib\x86), 但这里我打算直接放在Project下，通过命令引入，头文件可以直接include，至于lib库文件在网上查找到引入命令：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"path to libs"</span>)</span></span><br></pre></td></tr></table></figure><p>通过预编译处理可链接当前目录下的lib库。</p></li><li><p>在上面下载的三个库中，找出下面对应的文件：</p><ol><li><p>glfw：<img src=".\media\1526922099031.png" alt="1526922099031"></p></li><li><p>glm：</p><p><img src=".\media\1526922119803.png" alt="1526922119803"></p></li><li><p>glew:</p><p><img src=".\media\1526922170704.png" alt="1526922170704"></p></li><li><p>以及与它们相关的lib文件，这里统一列出：</p><p><img src=".\media\1526922268708.png" alt="1526922268708"></p></li></ol></li><li><p>然后放在对应文件夹里面，便于管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├─GL</span><br><span class="line">│      eglew.h</span><br><span class="line">│      glew.h</span><br><span class="line">│      glxew.h</span><br><span class="line">│      wglew.h</span><br><span class="line">│      </span><br><span class="line">├─GLFW</span><br><span class="line">│      glfw3.h</span><br><span class="line">│      glfw3native.h</span><br><span class="line">│      </span><br><span class="line">├─glm</span><br><span class="line">│  │  ext.hpp</span><br><span class="line">│  │  glm.hpp</span><br><span class="line">│  │  </span><br><span class="line">│  ├─core  <span class="comment">// 文件夹</span></span><br><span class="line">│  │      </span><br><span class="line">│  ├─gtc  <span class="comment">// 文件夹</span></span><br><span class="line">│  │      </span><br><span class="line">│  ├─gtx  <span class="comment">// 文件夹</span></span><br><span class="line">│  │      </span><br><span class="line">│  └─virtrev  <span class="comment">//文件夹</span></span><br><span class="line">│          </span><br><span class="line">└─libs</span><br><span class="line">        glew32.lib</span><br><span class="line">        glew32s.lib</span><br><span class="line">        glfw3.lib</span><br></pre></td></tr></table></figure></li><li><p>新建你的project，找到你的源文件(.cpp) 文件目录下，将上述这几个文件夹复制进去，在我的电脑上为：</p><p><img src=".\media\1526922637473.png" alt="1526922637473"></p></li><li><p>新建solution.h 即上面那个头文件，将下面引用代码放进去：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SOLUTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SOLUTION_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GL/glew.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GLFW/glfw3.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"glm/glm.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"opengl32.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"libs/glfw3.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"libs/glew32s.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>尝试运行测试代码：</p><p><a href="https://learnopengl.com/code_viewer.php?code=getting-started/hellotriangle" target="_blank" rel="noopener">你好，三角形</a> </p><p>注：<strong>在代码前面include的时候，记得将solution.h 文件include 进去，并删去多余的include，切记！</strong></p></li></ol><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>如果输出结果 为：</p><p><img src=".\media\1526923214110.png" alt="1526923214110"></p><p>则一切正常，配置完成。</p><p>author： zhanjzh</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@author: zhanjzh&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
